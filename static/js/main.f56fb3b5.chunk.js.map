{"version":3,"sources":["theme.js","slices/index.js","reducers/index.js","store.js","components/Header/index.js","components/MainCard/index.js","components/Main/index.js","components/MenuItem/index.js","components/MenuPage/index.js","containers/DishesPage/index.js","containers/DessertsPage/index.js","containers/ApperitizersPage/index.js","containers/DrinksPage/index.js","selectors/index.js","containers/SnackbarContainer/index.js","containers/App/index.js","containers/index.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","notification","createSlice","initialState","open","message","reducers","showNotification","state","payload","closeNotification","item","addItem","removeItem","filter","x","title","reducer","store","configureStore","rootReducer","Header","children","AppBar","Toolbar","to","Typography","variant","MenuCard","description","path","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","component","color","Container","styled","div","Main","data","options","map","option","MainCard","key","MenuItem","price","stars","onClick","style","maxWidth","height","Rating","value","readOnly","MenuPage","onItemClick","DishesPage","dispatch","useDispatch","actions","DessertsPage","ApperitizersPage","DrinksPage","notificationSelector","createSelector","SnackbarContainer","useSelector","Snackbar","autoHideDuration","onClose","App","className","fixed","paddingTop","Application","Fragment","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f56fb3b5.chunk.js","sourcesContent":["import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import { createSlice } from 'redux-starter-kit';\n\nexport const notification = createSlice({\n  initialState: {\n    open: false,\n    message: '',\n  },\n  reducers: {\n    showNotification: (state, { payload }) => ({\n      ...state,\n      open: true,\n      message: payload.message,\n    }),\n    closeNotification: state => ({\n      ...state,\n      open: false,\n    }),\n  },\n});\n\nexport const item = createSlice({\n  initialState: [],\n  reducers: {\n    addItem: (state, { payload }) => [...state, payload],\n    removeItem: (state, { payload }) => state.filter(x => x.title !== payload),\n  },\n});\n","import { notification, item } from '../slices';\n\nexport default {\n  item: item.reducer,\n  notification: notification.reducer,\n};\n","import { configureStore } from 'redux-starter-kit';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar, AppBar, Typography } from '@material-ui/core';\nimport { Link } from '@reach/router';\n\nfunction Header({ title, children }) {\n  return (\n    <AppBar>\n      <Toolbar>\n        <Link to=\"/\">\n          <Typography variant=\"h6\">{title}</Typography>\n        </Link>\n      </Toolbar>\n      {children}\n    </AppBar>\n  );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from '@reach/router';\n\nfunction MenuCard({ title, description, path }) {\n  return (\n    <Link to={path}>\n      <Card>\n        <CardActionArea>\n          <CardMedia\n            image=\"/static/images/cards/contemplative-reptile.jpg\"\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {title}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {description}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Link>\n  );\n}\n\nMenuCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nexport default MenuCard;\n","import React from 'react';\nimport styled from 'styled-components';\nimport data from '../../data/main';\nimport MainCard from '../MainCard';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction Main() {\n  return (\n    <Container>\n      {data.options.map(option => {\n        return <MainCard key={option.title} {...option} />;\n      })}\n    </Container>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core';\nimport Rating from '@material-ui/lab/Rating';\n\nfunction MenuItem({ title, description, price, stars, image, onClick }) {\n  return (\n    <Card style={{ maxWidth: 345 }} onClick={onClick}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {description}\n        </Typography>\n      </CardContent>\n      <CardMedia\n        style={{ height: 200 }}\n        image={`http://raw.githubusercontent.com/alefherrera/my-order/develop/src/assets/${image}`}\n        title={title}\n      />\n      <CardContent>\n        <Typography variant=\"h6\" color=\"textSecondary\" component=\"p\">\n          {`$ ${price}.00`}\n        </Typography>\n        {stars && <Rating value={stars} readOnly />}\n      </CardContent>\n    </Card>\n  );\n}\n\nMenuItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n  stars: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default MenuItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '../MenuItem';\nimport { Card, Typography } from '@material-ui/core';\n\nfunction MenuPage({ title, options, onItemClick }) {\n  return (\n    <Card>\n      <Typography variant=\"h4\">{title}</Typography>\n      {options.map(option => (\n        <MenuItem\n          key={option.title}\n          onClick={() => onItemClick(option)}\n          {...option}\n        />\n      ))}\n    </Card>\n  );\n}\n\nMenuPage.propTypes = {\n  title: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  onItemClick: PropTypes.func.isRequired,\n};\n\nexport default MenuPage;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { notification, item } from '../../slices';\nimport data from '../../data/dishes';\nimport MenuPage from '../../components/MenuPage';\n\nfunction DishesPage() {\n  const dispatch = useDispatch();\n  return (\n    <MenuPage\n      {...data}\n      onItemClick={option => {\n        dispatch(item.actions.addItem(option));\n        dispatch(\n          notification.actions.showNotification({\n            message: option.title + ' agregado correctamente!',\n          })\n        );\n      }}\n    />\n  );\n}\n\nexport default DishesPage;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { notification, item } from '../../slices';\nimport data from '../../data/desserts';\nimport MenuPage from '../../components/MenuPage';\n\nfunction DessertsPage() {\n  const dispatch = useDispatch();\n  return (\n    <MenuPage\n      {...data}\n      onItemClick={option => {\n        dispatch(item.actions.addItem(option));\n        dispatch(\n          notification.actions.showNotification({\n            message: option.title + ' agregado correctamente!',\n          })\n        );\n      }}\n    />\n  );\n}\n\nexport default DessertsPage;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { notification, item } from '../../slices';\nimport data from '../../data/apperitizers';\nimport MenuPage from '../../components/MenuPage';\n\nfunction ApperitizersPage() {\n  const dispatch = useDispatch();\n  return (\n    <MenuPage\n      {...data}\n      onItemClick={option => {\n        dispatch(item.actions.addItem(option));\n        dispatch(\n          notification.actions.showNotification({\n            message: option.title + ' agregado correctamente!',\n          })\n        );\n      }}\n    />\n  );\n}\n\nexport default ApperitizersPage;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { notification, item } from '../../slices';\nimport data from '../../data/drinks';\nimport MenuPage from '../../components/MenuPage';\n\nfunction DrinksPage() {\n  const dispatch = useDispatch();\n  return (\n    <MenuPage\n      {...data}\n      onItemClick={option => {\n        dispatch(item.actions.addItem(option));\n        dispatch(\n          notification.actions.showNotification({\n            message: option.title + ' agregado correctamente!',\n          })\n        );\n      }}\n    />\n  );\n}\n\nexport default DrinksPage;\n","import { createSelector } from 'redux-starter-kit';\n\nexport const notificationSelector = createSelector(\n  state => state.notification,\n  notification => notification\n);\n","import React from 'react';\nimport { Snackbar } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notification } from '../../slices';\nimport { notificationSelector } from '../../selectors';\n\nfunction SnackbarContainer() {\n  const { message, open } = useSelector(notificationSelector);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <Snackbar\n        message={message}\n        open={open}\n        autoHideDuration={3000}\n        onClose={() => dispatch(notification.actions.closeNotification())}\n      />\n    </div>\n  );\n}\n\nexport default SnackbarContainer;\n","import React from 'react';\nimport Header from '../../components/Header';\nimport Main from '../../components/Main';\nimport DishesPage from '../DishesPage';\nimport { Router } from '@reach/router';\nimport { Container } from '@material-ui/core';\nimport DessertsPage from '../DessertsPage';\nimport ApperitizersPage from '../ApperitizersPage';\nimport DrinksPage from '../DrinksPage';\nimport SnackbarContainer from '../SnackbarContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"My Order\"></Header>\n      <Container fixed style={{ paddingTop: 100 }}>\n        <Router>\n          <Main path=\"/\" />\n          <DishesPage path=\"/dishes\" />\n          <DessertsPage path=\"/desserts\" />\n          <ApperitizersPage path=\"/apperitizers\" />\n          <DrinksPage path=\"/drinks\" />\n        </Router>\n      </Container>\n      <SnackbarContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Provider } from 'react-redux';\nimport theme from '../theme';\nimport store from '../store';\nimport App from './App';\n\nfunction Application() {\n  return (\n    <React.Fragment>\n      <Provider store={store}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </Provider>\n    </React.Fragment>\n  );\n}\n\nexport default Application;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Application from \"./containers\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Application />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}